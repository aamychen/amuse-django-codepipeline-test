# Generated by Django 2.0.6 on 2018-06-19 08:07
import logging
from django.db import migrations

log = logging.getLogger(__name__)


def migrate_forwards(apps, schema_editor):
    """
    Create Contributors with Primary Artist Role for all Songs
    """
    Artist = apps.get_model('users', 'Artist')
    Song = apps.get_model('releases', 'Song')
    Contributor = apps.get_model('releases', 'Contributor')
    ContributorRole = apps.get_model('releases', 'ContributorRole')
    # These aren't obtainable from the generated models^, so I'll just put them here
    ContributorRole.ROLE_PRIMARY_ARTIST = 1
    Contributor.ROLE_PRIMARY = 6

    def create_contributors(contributors):
        Contributor.objects.bulk_create(contributors)
        contributor_roles = [
            ContributorRole(contributor=c, role=ContributorRole.ROLE_PRIMARY_ARTIST)
            for c in contributors
        ]
        ContributorRole.objects.bulk_create(contributor_roles)

    contributors = []
    count = 0
    songs = Song.objects.exclude(
        contributors__contributorrole__role=ContributorRole.ROLE_PRIMARY_ARTIST
    ).select_related('release')
    print()
    for song in songs:
        user = song.release.user
        try:
            # Not using first() to avoid breaking prefetch-cache
            artist = user.artist_set.all()[0]
        except IndexError:
            # If user is missing an Artist - just create one...
            user = song.release.user
            artist = Artist.objects.create(
                name=user.artist_name,
                spotify_page=user.spotify_page,
                twitter_name=user.twitter_name,
                facebook_page=user.facebook_page,
                instagram_name=user.instagram_name,
                soundcloud_page=user.soundcloud_page,
                youtube_channel=user.youtube_channel,
            )
            user.artistmembership_set.create(artist=artist)

        contributors.append(
            Contributor(
                song=song,
                name=artist.name,
                role=Contributor.ROLE_PRIMARY,
                artist=artist,
            )
        )
        count += 1
        if count < 5000:
            continue

        print('Creating 5000 primary artist contributors')
        create_contributors(contributors)
        contributors = []
        count = 0

    # Create remaining objects
    create_contributors(contributors)


class Migration(migrations.Migration):
    dependencies = [('releases', '0063_contributorrole_data')]

    operations = [
        migrations.RunPython(migrate_forwards, reverse_code=migrations.RunPython.noop)
    ]
