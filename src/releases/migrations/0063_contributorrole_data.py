# Generated by Django 2.0.6 on 2018-06-19 08:07
import logging
from django.db import migrations

log = logging.getLogger(__name__)

old_roles = dict(
    ROLE_FEATURED=1,
    ROLE_WRITER=2,
    ROLE_PRODUCER=3,
    ROLE_MIXER=4,
    ROLE_REMIXER=5,
    ROLE_PRIMARY=6,
    ROLE_PERFORMER=7,
    ROLE_OTHER=8,
)
new_roles = dict(
    ROLE_PRIMARY_ARTIST=1,
    ROLE_FEATURED_ARTIST=2,
    ROLE_WRITER=3,
    ROLE_PRODUCER=4,
    ROLE_MIXER=5,
    ROLE_REMIXER=6,
    ROLE_PERFORMER=7,
    ROLE_OTHER=8,
)


def migrate_forwards(apps, schema_editor):
    """
    Create ContributorRoles
    """
    Contributor = apps.get_model('releases', 'Contributor')
    ContributorRole = apps.get_model('releases', 'ContributorRole')
    # old value: new value
    new_role_map = {
        old_roles['ROLE_FEATURED']: new_roles['ROLE_FEATURED_ARTIST'],
        old_roles['ROLE_WRITER']: new_roles['ROLE_WRITER'],
        old_roles['ROLE_PRODUCER']: new_roles['ROLE_PRODUCER'],
        old_roles['ROLE_MIXER']: new_roles['ROLE_MIXER'],
        old_roles['ROLE_REMIXER']: new_roles['ROLE_REMIXER'],
        old_roles['ROLE_PRIMARY']: new_roles['ROLE_PRIMARY_ARTIST'],
        old_roles['ROLE_PERFORMER']: new_roles['ROLE_PERFORMER'],
        old_roles['ROLE_OTHER']: new_roles['ROLE_OTHER'],
    }

    crs = []
    count = 0
    # Speed things up by using prefetch_related and use python to check for CRs with
    # same role
    for c in Contributor.objects.all():
        if any([cr.role == new_role_map[c.role] for cr in c.contributorrole_set.all()]):
            continue

        crs.append(ContributorRole(contributor=c, role=new_role_map[c.role]))
        count += 1
        if count < 3000:
            continue

        ContributorRole.objects.bulk_create(crs)
        crs = []
        count = 0

    # Create remaining objects
    ContributorRole.objects.bulk_create(crs)


def migrate_backwards(apps, schema_editor):
    """
    Populate Contributors from ContributorRoles.
    This is to keep all contributor roles if any were added during the
    existance of ContributorRoles.
    """
    Contributor = apps.get_model('releases', 'Contributor')
    # new value: old value.
    old_role_map = {
        new_roles['ROLE_FEATURED_ARTIST']: old_roles['ROLE_FEATURED'],
        new_roles['ROLE_WRITER']: old_roles['ROLE_WRITER'],
        new_roles['ROLE_PRODUCER']: old_roles['ROLE_PRODUCER'],
        new_roles['ROLE_MIXER']: old_roles['ROLE_MIXER'],
        new_roles['ROLE_REMIXER']: old_roles['ROLE_REMIXER'],
        new_roles['ROLE_PRIMARY_ARTIST']: old_roles['ROLE_PRIMARY'],
        new_roles['ROLE_PERFORMER']: old_roles['ROLE_PERFORMER'],
        new_roles['ROLE_OTHER']: old_roles['ROLE_OTHER'],
    }

    for c in Contributor.objects.all():
        # Only fetch roles that are translatable to old roles
        crs = list(
            c.contributorrole_set.filter(role__in=old_role_map.keys()).order_by('pk')
        )
        if not len(crs):
            continue
        # The first CR is integrated with the Contributor
        c.role = old_role_map[crs.pop(0).role]
        c.save()
        # The rest are saved as new Contributors
        for cr in crs:
            # Save contributor as new, with new role
            c.pk = None
            c.role = old_role_map[cr.role]
            c.royalty_split = 0  # not used really, but anyways.
            c.save()


class Migration(migrations.Migration):
    dependencies = [('releases', '0062_contributorrole')]

    operations = [migrations.RunPython(migrate_forwards, migrate_backwards)]
